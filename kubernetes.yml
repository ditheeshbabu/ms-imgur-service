# PersistentVolume for H2 Database
apiVersion: v1
kind: PersistentVolume
metadata:
  name: h2-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/h2
---
# PersistentVolumeClaim for H2 Database
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: h2-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# H2 Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: h2-server
  labels:
    app: h2-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: h2-server
  template:
    metadata:
      labels:
        app: h2-server
    spec:
      containers:
        - name: h2-server
          image: ditheesh/h2:latest
          ports:
            - containerPort: 9092
            - containerPort: 8082
          volumeMounts:
            - name: h2-data
              mountPath: /data
          env:
            - name: H2_OPTIONS
              value: "-tcp -tcpAllowOthers -web -webAllowOthers"
      volumes:
        - name: h2-data
          persistentVolumeClaim:
            claimName: h2-pvc
---
# H2 Service
apiVersion: v1
kind: Service
metadata:
  name: h2-service
spec:
  selector:
    app: h2-server
  ports:
    - name: tcp-port
      protocol: TCP
      port: 9092
      targetPort: 9092
    - name: web-console
      protocol: TCP
      port: 8082
      targetPort: 8082
---
# Redis Headless Service for Cluster Communication
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
spec:
  clusterIP: None
  selector:
    app: redis
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  labels:
    app: redis
spec:
  serviceName: redis-headless
  replicas: 3 # Number of Redis nodes
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6.2
          ports:
            - containerPort: 6379
          command:
            - "redis-server"
            - "--cluster-enabled"
            - "yes"
            - "--cluster-config-file"
            - "/data/nodes.conf"
            - "--cluster-node-timeout"
            - "5000"
            - "--appendonly"
            - "yes"
          volumeMounts:
            - name: redis-data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
# Spring Boot Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ms-imgur-service
  labels:
    app: ms-imgur-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ms-imgur-service
  template:
    metadata:
      labels:
        app: ms-imgur-service
    spec:
      containers:
        - name: ms-imgur-service
          image: ms-imgur-service:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 9090
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_DATASOURCE_URL
              value: jdbc:h2:tcp://h2-service:9092/~/imgurData;AUTO_SERVER=TRUE
            - name: SPRING_DATASOURCE_USERNAME
              value: sa
            - name: SPRING_DATASOURCE_PASSWORD
              value: password
            - name: SPRING_REDIS_HOST
              value: redis-service
            - name: SPRING_REDIS_PORT
              value: "6379"
---
# Spring Boot Service
apiVersion: v1
kind: Service
metadata:
  name: springboot-service
spec:
  selector:
    app: ms-imgur-service
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
  type: LoadBalancer
---
# HorizontalPodAutoscaler for Spring Boot App
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ms-imgur-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ms-imgur-service
  minReplicas: 3
  maxReplicas: 12
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70